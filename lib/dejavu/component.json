{
  "name": "dejavu",
  "version": "0.1.13",
  "main": "src/",
  "dependencies": {
    "amd-utils": "0.6.x"
  },
  "readme": "# dejavu #\n\n---\n\n[![Build Status](https://secure.travis-ci.org/IndigoUnited/dejavu.png)](http://travis-ci.org/IndigoUnited/dejavu)\n\nHave you ever had the feeling that you're seeing something you've already seen\nbefore? That's the feeling you get when using `dejavu`.\n\nIf you are a developer coming from a language like PHP, Java, ActionScript 3.0,\nand others, it's likely that you are already familiar with Object Oriented\nProgramming. However, JavaScript uses prototypal inheritance which, although\npowerful and flexible, can be difficult to understand, and specially to maintain\nin large projects.\n\n`dejavu` is a library that delivers classical inheritance on top of JavaScript\nprototypal inheritance, making it a breeze to move into JavaScript.\n\n\n\n## Why another? ##\n\nThere are some libraries out there able to shim classical inheritance,\nhowever none offers all the functionality that many programmers require.\nAlso, even though being one of the most feature rich OOP libraries out there, it has one of the best performances, rivaling with vanilla JS in production.\n\n\n\n## Features ##\n\n* Concrete classes\n* Abstract classes\n* Interfaces\n* Mixins (so you can get some sort of multiple inheritance)\n* Private and protected members\n* Static members\n* Constants\n* Ability to declare true singletons via protected/private constructors\n* Context binding for functions\n* Method signature checks\n* Possible to extend or borrow from vanilla classes\n* Custom instanceOf with support for Interfaces\n* Classes and instances are locked by default\n    * Functions cannot be added, replaced or deleted\n    * Properties can only be modified\n* Two builds, `regular` and `AMD` based\n    * `AMD` optimized for speeding up developer workflow, allowing testing\n      without the need to re-compile everything into a single file\n    * `regular` if you are not using `AMD` in your projects\n* Two modes for each build, `strict` and `loose`\n    * `strict` best in development, enforcing a lot of checks, making sure you\n      don't make many typical mistakes\n    * `loose` best for production, without checks, improving performance\n\nUsers are encouraged to declare\n['use strict'](https://developer.mozilla.org/en/JavaScript/Strict_mode) while\nusing the `dejavu` in strict mode, otherwise some code might fail silently.\nThis can happen because `dejavu` uses `Object.freeze` and `Object.seal` to lock\nclasses and instances, guaranteeing that no one changes the behaviour of your\nclasses by replacing methods, etc, and possibly breaking your code, making it\nreally hard to pin point what's wrong. Altough this is the default behavior, it can be changed.\nYou will read more on it later in this document.\n\n**Do not confuse 'use strict' with the dejavu strict mode.**\n\n\n\n## Works on ##\n\n* IE (6+)\n* Chrome (4+)\n* Safari (3+)\n* Firefox (3.6+)\n* Opera (9+)\n* Node.js and Rhino\n\n\n\n## Getting started ##\n\nThe quickest way to start using `dejavu` in your project, is by simply including\n`dist/regular/strict/dejavu.js` (note that this is in __strict__ mode).\n\nIf you're developing a __client-side__ app, simply put the file in some folder,\nand include it in the HTML:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <script type=\"text/javascript\" src=\"dejavu.js\"></script>\n    </head>\n    <body>\n        <script type=\"text/javascript\">\n            'use strict';\n\n            // Declare the \"Person\" class\n            var Person = dejavu.Class.declare({\n                _name: null,\n\n                initialize: function(name) {\n                    this.setName(name);\n                },\n\n                setName: function(name) {\n                    this._name = name;\n\n                    return this;\n                },\n\n                getName: function() {\n                    return this._name;\n                }\n            });\n\n            // Create a new instance of person\n            var indigo = new Person('Marco');\n            console.log('A new indigo was born,', indigo.getName());\n        </script>\n    </body>\n</html>\n```\n\nThis will make a `dejavu` global available for you.\nIf you're developing in __Node.js__, install it with `npm install dejavu` and use it like so:\n\n```js\nvar dejavu = require('dejavu');\n\n// Declare the \"Person\" class\nvar Person = dejavu.Class.declare({\n    _name: null,\n\n    initialize: function(name) {\n        this.setName(name);\n    },\n\n    setName: function(name) {\n        this._name = name;\n\n        return this;\n    },\n\n    getName: function() {\n        return this._name;\n    }\n});\n\n// Create a new instance of person\nvar indigo = new Person(\"Marco\");\nconsole.log(\"A new indigo was born,\", indigo.getName());\n```\n\nIn node, the default mode running will be the strict mode unless the STRICT environmen\n variable is set to false.\nEnvironment variables can be changed system wide or per process like so:\n\n```js\nprocess.env.STRICT = false;\n```\n\n\n\n## Performance ##\n\nSince all those nice features and common rules of classic OOP degrade\nperformance, `dejavu` has two separates modes, for different stages in the\ndevelopment.\n\nThe `strict` mode is suitable for __development__, and will do all sorts of\nchecks, throwing an error when you try to do something considered illegal.\n\n**Note that if your project works in strict mode, it will work in loose mode.**\n\nAs for the `loose` mode, there is no overhead associated with checks, thus\nmaking it suitable for __production__, since it will be more efficient and\nhave a __lower memory footprint and filesize__.\n\nFinally, in order to achieve that extra edge, that puts `dejavu` next to vanilla\nJS in terms of performance, you should run the optimizer that is bundled with\nthe library. Note that this step is completely optional, and `dejavu` will still\nperform faster than the other libraries in most browsers, even if you don't run\nthe optimizer. The optimizer will analyse your code, and make some improvements\nboosting it a bit further.\n\nYou can check the benchmarks in [jsperf](http://jsperf.com/oop-benchmark/58)\ncomparing `dejavu` with other OOP libraries. Note that the loose mode\nis used in this test, simulating a production environment, and both the normal\nand optimized versions are tested.\n\n\n\n## Taking it to another level\n\n\nFront-end devs are encouraged to program using the AMD paradigm because of its obvious benefits.\nSince dejavu is built upon it, it will integrate seamlessly with your AMD loader.\nThe easy way to set it up is to define a path for dejavu in your loader config like so:\n\n```js\n{\n   // Your loader config\n   paths: {\n       'dejavu': '/path/to/dejavu/dist/strict/main'     // You can switch to the loose mode anytime\n   }\n}\n```\n\nThen require it and use it:\n\n```js\ndefine(['dejavu'], function (dejavu) {\n\n    // The dejavu variable is an object that contains:\n    // Class\n    // FinalClass\n    // AbstractClass\n    // Interface\n    // instanceOf\n    // options\n\n    // Example usage\n    var MyClass = dejavu.Class.declare({\n        initialize: function () {\n            // ...\n        }\n    });\n\n    return MyClass;\n});\n```\n\nIf you just want to require specific parts of `dejavu`, you can do so.\nIn order to achieve this, you must configure your loader like so:\n\n```js\n{\n    // Your loader config\n    packages: [\n        {\n            name: 'dejavu',\n            location: '/path/to/dejavu/dist/strict'     // You can switch to the loose mode anytime\n        }\n    ]\n}\n```\n\nWith this setup, you can still require the dejavu object like shown above or require specific parts of it:\n\n```js\ndefine(['dejavu/Class'], function (Class) {\n\n    // Example usage\n    var MyClass = dejavu.Class.declare({\n        initialize: function () {\n            // ...\n        }\n    });\n\n    return MyClass;\n});\n```\n\nAs you can see, in this case, only the `Class` module of `dejavu` is included,\nwhich means all the other modules are not loaded.\n\n\n\n## Syntax\n\n### Interface definition ###\n\nObject interfaces allow you to create code which specifies which methods a class must implement, without having to define how these methods are handled.\nBelow there's an example of an _EventsInterface_ that has the role of adding event listeners and fire events:\n\n```js\ndefine(['dejavu/Interface'], function (Interface) {\n\n    'use strict';\n\n    var EventsInterface = Interface.declare({\n        $name: 'EventsInterface',                       // Will make easier to debug mistakes (optional)\n\n        addListener: function (name, fn, context) {},\n\n        removeListener: function (name, fn) {},\n\n        fireEvent: function (name, args) {}\n    });\n\n    return EventsInterface;\n});\n```\n\nInterfaces can extend multiple interfaces. They can also define static functions signature.\nBe aware that all functions must obey its base signature (see explanation later in this document).\n\n```js\ndefine(['path/to/EventsInterface', 'dejavu/Interface'], function (EventsInterface, Interface) {\n\n    'use strict';\n\n    var SomeEventsInterface = Interface.declare({\n        $name: 'SomeEventsInterface',\n        $extends: EventsInterface,   // This interface extends EventsInterface\n                                     // Interfaces can extend multiple ones, just reference them in an array\n\n        $statics: {                  // This is how we define statics\n            getTotalListeners: function () {}\n        }\n\n    });\n\n    return SomeEventsInterface;\n});\n```\nAlternatively, one can extend an interface with the extend() function. The equivalent code of the shown above is:\n\n```js\ndefine(['path/to/EventsInterface', 'dejavu/Interface'], function (EventsInterface, Interface) {\n\n    'use strict';\n\n    var SomeEventsInterface = EventsInterface.extend({\n        $name: 'SomeEventsInterface',\n\n        $statics: {                  // This is how we define statics\n            getTotalListeners: function () {}\n        }\n\n    });\n\n    return SomeEventsInterface;\n});\n```\n\n\n\n### Interface usage example ###\n\nA class that implements an interface must define all the interface methods and be compatible with their signature.\nYou define that a class implements an interface by specifying it in the $implements keyword.\nThe $implements keyword can be an interface or an array of interfaces.\nFollowing the previous example we can define a concrete class - _EventsEmitter_ - that implements the _EventsInterface_ interface.\n\n```js\ndefine([\n    'path/to/EventsInterface',\n    'dejavu/Class'\n], function (EventsInterface, Class) {\n\n    'use strict';\n\n    var EventsEmitter = Class.declare({\n        $name: 'EventsEmitter',\n        $implements: EventsInterface,   // The class implements the EventsInterface interface\n                                        // You can specify multiple interfaces in an array\n\n        addListener: function (name, fn, context) {\n            // Implementation goes here\n        },\n\n        removeListener: function (name, fn) {\n            // Implementation goes here\n        },\n\n        fireEvent: function (name, args) {\n            // Implementation goes here\n        }\n    });\n\n    return EventsEmitter;\n});\n```\n\n\n\n### Abstract classes ###\n\nClasses defined as abstract may not be instantiated, and any class that contains at least one abstract method must also be abstract.\nMethods defined as abstract simply declare the method's signature.\nWhen an abstract class implements an interface and doesn't implement some of its methods, those will be automatically declared as abstract.\nBelow there is an example of an abstract class - _AbstractEmitter_ - that implements all of the _EventsInterface_ interface methods, except the _fireEvent()_ method.\n\n```js\ndefine([\n    'path/to/EventsInterface',\n    'dejavu/AbstractClass'\n],\nfunction (EventsInterface, AbstractClass) {\n\n    'use strict';\n\n    var AbstractEventsEmitter = AbstractClass.declare({\n        $name: 'AbstractEventsEmitter',\n        $implements: EventsInterface,   // The class must implement the EventsInterface\n\n        initialize: function (argument1) {\n            // This is the constructor\n            // Calling new on an abstract class will throw an error\n            // Though a class that extends this abstract class will run this constructor if called\n        },\n\n        addListener: function (name, fn, context) {\n            // Implementation goes here\n        },\n\n        removeListener: function (name, fn) {\n            // Implementation goes here\n        },\n\n        // fireEvent() is not implemented, therefore is automatically declared as abstract\n\n        $abstracts: {                   // This how we defined abstract methods\n\n            removeAll: function () {},\n\n            $statics: {                 // We can also define abstract static methods\n                getTotalListeners: function () {}\n            }\n        }\n    });\n\n    return AbstractEventsEmitter;\n});\n```\n\nAbstract classes can extend other abstract classes or concrete classes while implementing other interfaces.\n\n```js\ndefine([\n    'path/to/some/class',\n    'path/to/some/interface',\n    'path/to/other/interface',\n    'dejavu/AbstractClass'\n],\nfunction (SomeClass, SomeInterface, OtherInterface, AbstractClass) {\n\n    'use strict';\n\n    var ComplexAbstractClass = AbstractClass.declare({\n        $name: 'ComplexAbstractClass',\n        $extends: SomeClass,\n        $implements: [SomeInterface, OtherInterface],\n\n        /**\n         * Class constructor.\n         */\n        initialize: function (argument1) {\n            // Call super\n            this.$super(argument1);\n\n            // Do other things here\n        },\n\n        $statics: {\n            // Some class static members\n        },\n\n        $abstracts: {\n\n            // Some abstract functions\n\n            $statics: {\n                // Some abstract static functions\n            }\n        }\n    });\n\n    return ComplexAbstractClass;\n});\n```\n\nAlternatively, one can extend a concrete or abstract class with the extend() function. The equivalent code of the shown above is:\n\n```js\ndefine([\n    'path/to/some/class',\n    'path/to/some/interface',\n    'path/to/other/interface',\n    'dejavu/AbstractClass'\n],\nfunction (SomeClass, SomeInterface, OtherInterface, AbstractClass) {\n\n    'use strict';\n\n    var ComplexAbstractClass = SomeClass.extend({\n        $name: 'ComplexAbstractClass',\n        $implements: [SomeInterface, OtherInterface],\n\n        /**\n         * Class constructor.\n         */\n        initialize: function (argument1) {\n            // Call super\n            this.$super(argument1);\n\n            // Do other things here\n        },\n\n        $statics: {\n            // Some class static members\n        },\n\n        $abstracts: {\n\n            // Some abstract functions\n\n            $statics: {\n                // Some abstract static functions\n            }\n        }\n    });\n\n    return ComplexAbstractClass;\n});\n```\n\n\n\n### Concrete classes ###\n\nConcrete classes can extend other concrete classes or abstract classes as well as implement several interfaces.\nThey differ from abstract classes in the way that they can't have abstract methods.\nBelow is described the full syntax that can be used in concrete and abstract classes.\n\n```js\ndefine([\n    'path/to/some/class',\n    'path/to/other/class',\n    'path/to/some/interface',\n    'path/to/other/interface',\n    'dejavu/Class'\n],\nfunction (SomeClass, OtherClass, SomeInterface, OtherInterface, Class) {\n\n    'use strict';\n\n    var ConcreteClass = Class.declare({\n        $name: 'ConcreteClass',\n        $extends: SomeClass,\n        $implements: [SomeInterface, OtherInterface],\n        $borrows: OtherClass,                           // We can add mixins by specifying them in here\n                                                        // You can specify multiple mixins in an array\n\n        /**\n         * Class constructor.\n         */\n        initialize: function () {\n            // Call super\n            this.$super();\n\n            // Do other things here\n        },\n\n        $statics: {\n            // Some class static members\n        }\n    });\n});\n```\n\n\n\n### Mixins ###\n\nA mixin is a class or object that provides a certain functionality to be reused by other classes, since all their members will be copied (expect for the initialize method).\nMixins can be used like specified in the example above.\nIf clashes occur with multiple mixins, that last one takes precedence.\n\n\n\n### Binds ###\n\nThe $bind() function allows you to bind a anonymous functions to the instance to preserve the context as well as allowing private/protected methods invocations.\n\n```js\ndefine([\n    'dejavu/Class'\n],\nfunction (Class) {\n\n    'use strict';\n\n    var ConcreteClass = Class.declare({\n        $name: 'ConcreteClass',\n\n        /**\n         * Constructor.\n         */\n        initialize: function (element) {\n            element.addEventListener('click', function () {\n                console.log('caught click');\n                this._doSomething();\n            }.$bind(this));                                                    // Use the $bind\n\n            element.addEventListener('keydown', this.$bind(function () {\n                console.log('caught keydown');\n                this._doSomething();                                           // Use the this.$bind (same behavior as above)\n            });\n        },\n\n        /**\n         * Some protected method\n         */\n        _doSomething: function () {\n            // ..\n        }\n    });\n});\n```\nAlternatively, the $bound() function allows you to bind a class function to the instance.\nThis is useful if certain functions are meant to be used as callbacks or handlers.\nYou don't need to bind the function manually, it will be bound for you automatically.\n\n```js\ndefine([\n    'dejavu/Class'\n],\nfunction (Class) {\n\n    'use strict';\n\n    var ConcreteClass = Class.declare({\n        $name: 'ConcreteClass',\n\n        /**\n         * Constructor.\n         */\n        initialize: function (element) {\n            element.addEventListener('click', this._handleClick);\n        },\n\n        /**\n         * Handles some click event.\n         */\n        _handleClick: function () {\n            // Handle click here\n        }.$bound()\n    });\n});\n```\n\n### Constants ###\n\nThe $constants keyword allows you to defined constants.\nIf Object.defineProperty is available, any attempt to modify the constant value will throw an error (only in the strict mode).\nConstants can be defined in classes, abstract classes and interfaces.\n\n```js\ndefine(['dejavu/Class', function (Class) {\n\n    'use strict';\n\n    var SomeClass = Class.declare({\n        $name: 'SomeClass',\n\n        $constants: {\n            FOO: 'bar'\n            BAR: 'foo'\n        },\n\n        /**\n         * Class constructor.\n         */\n        initialize: function () {\n            this.$self.FOO;    // 'bar'\n            SomeClass.FOO;     // 'bar' (is the same as above)\n        }\n    });\n\n    SomeClass.FOO; // 'bar'\n    SomeClass.BAR; // 'foo'\n\n    return SomeClass;\n});\n```\n\n\n### Final members/classes ###\n\nMembers that are declared as final cannot be overriden by a child class.\nIf the class itself is being defined final then it cannot be extended.\n\n```js\ndefine(['dejavu/FinalClass', function (FinalClass) {\n\n    'use strict';\n\n    var SomeClass = FinalClass.declare({    // This class cannot be extended\n        $name: 'SomeClass',\n\n        /**\n         * Class constructor.\n         */\n        initialize: function () {\n            // ...\n        }\n    });\n\n    return SomeClass;\n});\n\ndefine(['dejavu/Class', function (Class) {\n\n    'use strict';\n\n    var SomeClass = Class.declare({\n        $name: 'SomeClass',\n\n        /**\n         * Class constructor.\n         */\n        initialize: function () {\n            // ...\n        },\n\n        $finals: {                  // Classes that extend this one are not allowed to override the members below\n\n            someMethod: function () {\n                // ...\n            },\n            someProperty: 'foo',\n\n            $statics: {             // We can also define static methods as final\n                staticMethod: function () {\n                    // ...\n                },\n                staticProperty: 'bar'\n            }\n    });\n\n    return SomeClass;\n});\n\n```\n\n### Protected and private members ###\n\nProtected and private members should be prefixed with _ and __ respectively.\nIf Object.defineProperty is available, it will be used to manage their access (only in the strict mode).\n\n\n\n### Signature check ###\n\nAll functions are virtual functions, therefore they can be overriden except if they are classified as final.\nAdditionally, if a method is abstract, a subclass can only implement/override it if they obey their signature (must be equal or augmented with additional optional arguments).\nArguments prefixed with a $ are evaluated as optional. The signature check is done for all abstract functions (interface functions are also considered abstract).\n\n```js\nvar SomeAbstractClass = AbstractClass.declare({\n    $abstracts: {\n        foo: function (param1) {}\n    }\n});\n\nvar SomeClass = Class.declare({\n    $extends: SomeAbstractClass,\n\n    foo: function (param1) {             // Signature is equal, it's valid\n        // Do something here\n    }\n});\n\nvar ComplexClass = Class.declare({\n    $extends: SomeClass,\n\n    foo: function (param1, $param2) {    // Although it's signature is not equal, was augmented with an additional optional argument, so it's valid\n        // Do something here\n    }\n});\n\nvar OtherComplexClass = Class.declare({\n    $extends: SomeClass,\n\n    foo: function (param1, param2) {     // Will throw an error because foo(param1) is not compatible with foo(param1, param2)\n        // Do something here\n    }\n});\n```\n\n\n### Calling static methods within an instance ###\n\nTo call static methods inside an instance you can use $self and $static.\n$self gives access to the class itself and $static gives access to the called class in a context of static inheritance.\n$self is the same as using the class variable itself.\n\n```js\nvar Example1 = Class.declare({\n    foo: function (param1) {\n        return this.$self.bar;    // same as Example1.bar;\n    },\n    $statics: {\n        bar: 'hello'\n    }\n});\n\nvar Example2 = Class.declare({\n    foo: function (param1) {\n        return this.$static.bar;\n    },\n    $statics: {\n        bar: 'hello'\n    }\n});\n\nvar Example3 = Class.declare({\n    $extends: Example1\n    $statics: {\n        bar: 'bye'\n    }\n});\n\nvar Example4 = Class.declare({\n    $extends: Example2\n    $statics: {\n        bar: 'bye'\n    }\n});\n\nExample3.foo(); // hello\nExample4.foo(); // bye\n```\n\n\n\n### instanceOf ###\n\nThe instanceOf function works exactly the same way as the native instanceof except that it also works for interfaces.\n\n\n\n###  Classes/instances are locked ###\n\nBy default, constructors and instances are locked. This means that no one can monkey patch your code.\nThis behaviour can be changed in two ways:\n\n#### With the $locked flag:\n\n```js\nvar MyUnlockedClass = Class.declare({\n    $name: 'MyUnlockedClass',\n    $locked: false\n\n    initialize: function () {\n        this.foo = 'bar';           // Altough the foo property is not declared,\n                                    // it will not throw an error\n    },\n\n    run: function () {\n        console.log('run!');\n    }\n});\n\nMyUnlockedClass.prototype.run = function () {   // Methods can be replaced in the prototype\n    console.log('im running!');\n};\n\nvar myUnlockedInstance = new MyUnlockedClass();\nmyUnlockedInstance.undeclaredProperty = 'foo'   // Properties can be added to the instance\nmyUnlockedInstance.run = function () {          // Methods can be replaced in the instance\n    console.log('im running naked!');\n};\n```\n\n#### By setting the global option:\n\nThis will change the default behaviour, but classes can still override it with the $locked flag.\n\n```\ndejavu.options.locked = false;\n```\n\nNote that once a class is unlocked, its subclasses cannot be locked.\nAlso, although undeclared members are allowed, they will not have their access controlled (they are interpreted as public).\n### Notes ###\n\nPlease avoid using object constructors for strings, objects, booleans and numbers:\n\n```js\nvar MyClass = Class.declare({\n    foo: new String('bar'),  // Don't use this\n    foz: 'bar'               // Ok\n});\n```\n\n\n\n## Optimizer ##\n\ndejavu bundles an optimizer that makes your code faster and lighter.\nIt specifically:\n\n* Improves $super and $self usage\n* Removes all $name and $locked properties because they are not used in the loose version\n* Removes the need for wrappers, improving performance by a great margin\n* Removes abstract functions from abstract classes\n* Removes functions from interfaces\n* Replaces $bind() with native bind()\n\nThe optimizer is located in the `bin` folder.\nExample usage:\n\n`node optimizer < file_in.js > file_out.js`\n\ndejavu also comes with a grunt task.\nBellow is a sample usage copied from a grunt file:\n\n```js\ngrunt.loadNpmTasks('dejavu');\n\ngrunt.initConfig({\n    dejavu: {\n        optimize: {\n            options: {\n                exclude: [/bootstrap(\\.min)?\\.js$/]\n            },\n            files: {\n                'dist/': 'src/**/*.js'\n            }\n        }\n    }\n});\n```\n\n## Dependencies ##\n\ndejavu depends on [amd-utils](https://github.com/millermedeiros/amd-utils).\nIf you use the regular build, you don't need to worry because all functions used from amd-utils are bundled for you.\nIf you use it on node, npm will take care of getting the dependencies for you.\nIf you use the AMD build, you must specify the path to amd-utils.\nFor example, if you use [RequireJS](http://requirejs.org/):\n\n```js\n    paths : {\n        'amd-utils': '../vendor/amd-utils/src'\n    },\n\n    packages: [\n        {\n            name: 'dejavu'\n            location: '../../dist/amd/strict',\n        }\n    ]\n```\n\n\n\n## Building dejavu ##\n\nSimply run `npm install` to install all the tools needed.\nThen just run `npm run-script build` or `node build`.\n\n\n## Testing dejavu ##\n\nPlease take a look at the [test](https://github.com/IndigoUnited/dejavu/tree/master/test) section.\n\n\n\n## License ##\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).",
  "readmeFilename": "README.md",
  "_id": "dejavu@0.1.13",
  "description": "---",
  "repository": {
    "type": "git",
    "url": "git://github.com/IndigoUnited/dejavu.git"
  }
}